// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // if it's C instruction, use control bits, otherwise set them to 0?
    Mux(a=false, b=instruction[12], sel=instruction[15], out=a);
    Mux(a=true, b=instruction[11], sel=instruction[15], out=c1);
    Mux(a=true, b=instruction[10], sel=instruction[15], out=c2);
    Mux(a=true, b=instruction[9], sel=instruction[15], out=c3);
    Mux(a=true, b=instruction[8], sel=instruction[15], out=c4);
    Mux(a=true, b=instruction[7], sel=instruction[15], out=c5);
    Mux(a=true, b=instruction[6], sel=instruction[15], out=c6);
    Mux(a=false, b=instruction[5], sel=instruction[15], out=d1);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=d2);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);
    Mux(a=false, b=instruction[2], sel=instruction[15], out=j1);
    Mux(a=false, b=instruction[1], sel=instruction[15], out=j2);
    Mux(a=false, b=instruction[0], sel=instruction[15], out=j3);
    // load value into A register or not
    Not(in=instruction[15], out=itsA);
    Or(a=d1, b=itsA, out=loadA);
    // if its A instruction, select it, otherwise select ALU output
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=input);
    ARegister(in=input, load=loadA, out=aOut, out[0..14]=addressM);
    //select A or M register based on instruction?
    Mux16(a=aOut, b=inM, sel=a, out=AorM);
    DRegister(in=ALUout, load=d2, out=dOut);

    ALU(x=dOut, y=AorM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=ALUout, out=outM, zr=aluZr, ng=aluNeg);

    // no jump == PC++
    // jump == PC = A
    // reset == 1, PC = 0
    // if jump == 000 - no jump
    //The first j-bit specifies whether to jump in case this value is negative,
    //the second j-bit in case the value is zero,
    //and the third j-bit in case it is positive.

    // // calculate no jump
    // Or(a=j1, b=j2, out=noJump1);
    // Or(a=noJump1, b=j3, out=noJump2);
    // Not(in=noJump2, out=increment);

    // // calculate unconditional jump
    // And(a=j1, b=j2, out=jump1);
    // And(a=jump1, b=j3, out=jump);

    // calc jump if result negative
    And(a=j1, b=aluNeg, out=jumpNeg);
    //calc jump if zero
    And(a=j2, b=aluZr, out=jumpZero);
    //calc alu pozitive
    Or(a=aluZr, b=aluNeg, out=aluNotPositive);
    Not(in=aluNotPositive, out=aluPositive);
    // calc jump if positive
    And(a=j3, b=aluPositive, out=jumpPos);

    // calculate if jump
    Or(a=jumpNeg, b=jumpZero, out=jump1);
    Or(a=jump1, b=jumpPos, out=jump);
    Not(in=jump, out=increment);

    PC(in=aOut, load=jump, inc=increment, reset=reset, out=pcout, out[0..14]=pc);
}